=encoding utf8

=head1 NAME

perlcdelta - what is new for cperl v5.26.0

=head1 DESCRIPTION

This document describes the differences between the cperl 5.25.3
and the cperl 5.26.0 releases.

If you are upgrading from an earlier release such as v5.24.2c, first
read the L<perl525*cdelta> documentation, which describes differences
between v5.25.0c and v5.26.0c.

=head1 Notice

cperl v5.26.0c was merged with perl v5.26.0 (as all previous major cperl releases).
The rejected commits for the differences have been documented at the github issues
L<[cperl #165]|https://github.com/perl11/cperl/issues/165> and
L<[cperl #256]|https://github.com/perl11/cperl/issues/256>.

=head1 Deprecations

See the new L<perldeprecation> pod.

Many old deprecations got now a fixed final date, but several perl5 deprecations
were undeprecated in cperl and rather fixed. I<(as in previous cperl releases.)>

=head1 Performance Enhancements

=over 4

=item *

Ensure that the lexer always sees large enough buffers to do fast
wordwise memcmp comparisons, esp. with constant lengths.

=back

=head1 Modules and Pragmata

=head2 Updated Modules and Pragmata

=over 4

=item B  1.68_06

Use op_class API

=item B::Terse  1.07

Update deprecation message

=item Cpanel-JSON-XS  3.0230

fix decode_prefix offset when the string was re-allocated.
rather return the relative offset not the pointer to the old start.

=item ExtUtils::MakeMaker

fix \Q$archname\E in t/basic.t

=item ExtUtils::Install 2.04_01

support make -s => PERL_INSTALL_QUIET

=item ExtUtils::ParseXS  3.34_02

XS_EXTERNAL does now extern "C"

=item feature  1.47_01

Revise documentation of eval and evalbytes

=item File::Glob 1.28

Deprecated File::Glob::glob()

=item Getopt::Std 1.12

Changed pod NAME to follow convention.

=item Net-Ping 2.58_01

Todo 010_pingecho.t on EBCDIC

=item open 1.11
=item PerlIO 1.10

pod: Suggest to use strict :encoding(UTF-8) PerlIO layer over not
strict :encoding(utf8) For data exchange it is better to use strict
UTF-8 encoding and not perl's utf8.

=item PathTools  4.67c

Add security note to File::Spec::no_upwards
L<[RT #123754|https://rt.perl.org/Public/Bug/Display.html?id=123754>

=item Pod::Html  2.23002c

Removed deprecated C<--libpods> option.

=item Storable 3.05_10

Fixed wrong recursion depth error with large arrays containing another
array. Probe for valid max. stack sizes, and added 2 APIs.
L<[cperl #257]|https://github.com/perl11/cperl/issues/257>

Update documentation from the CPAN version.

=item threads  2.15

Remove extra terminating semicolon.
Clean up temporary directories after testing.

=item threads-shared  1.55

Documentation

=back

=head1 Documentation

=head2 New Documentation

=head3 L<perldeprecation>

This file documents all upcoming deprecations, and some of the deprecations
which already have been removed. The purpose of this documentation is
two-fold: document what will disappear, and by which version, and serve
as a guide for people dealing with code which has features that no longer
work after an upgrade of their perl.

=head2 Changes to Existing Diagnostics

As of Perl 5.25.9, all new deprecations will come with a version in
which the feature will disappear. And with a few exceptions, most
existing deprecations will state when they'll disappear. As such, most
deprecation messages have changed.

=over 4

=item *

Attribute "locked" is deprecated, and will disappear in Perl 5.28

=item *

Attribute "unique" is deprecated, and will disappear in Perl 5.28

=item *

Constants from lexical variables potentially modified elsewhere are
deprecated. This will not be allowed in Perl 5.32

=item *

Deprecated use of my() in false conditional. This will be a fatal error
in Perl 5.30

=item *

File::Glob::glob() will disappear in perl 5.30. Use File::Glob::bsd_glob()
instead.

=item *

%s() is deprecated on :utf8 handles. This will be a fatal error in Perl 5.30

=item *

$* is no longer supported. Its use will be fatal in Perl 5.30

=item *

$* is no longer supported. Its use will be fatal in Perl 5.30

=item *

Opening dirhandle %s also as a file. This will be a fatal error in Perl 5.28

=item *

Opening filehandle %s also as a directory. This will be a fatal
error in Perl 5.28

=item *

Setting $/ to a reference to %s as a form of slurp is deprecated,
treating as undef. This will be fatal in Perl 5.28

=item *

Unescaped left brace in regex is deprecated here (and will be fatal
in Perl 5.30), passed through in regex; marked by S<< E<lt>-- HERE >> in m/%s/

=item *

Unknown charname '' is deprecated. Its use will be fatal in Perl 5.28

=item *

Use of bare E<lt>E<lt> to mean E<lt>E<lt>"" is deprecated. Its use
will be fatal in Perl 5.28

=item *

Use of code point 0x%s is deprecated; the permissible max is 0x%s.
This will be fatal in Perl 5.28

=item *

Use of comma-less variable list is deprecated. Its use will be fatal
in Perl 5.28

=item *

Use of inherited AUTOLOAD for non-method %s() is deprecated. This
will be fatal in Perl 5.28

=item * 

Use of strings with code points over 0xFF as arguments to %s operator
is deprecated. This will be a fatal error in Perl 5.28

=back

=head1 Diagnostics

The following additions or changes have been made to diagnostic output,
including warnings and fatal error messages.  For the complete list of
diagnostic messages, see L<perldiag>.

=head1 Configuration and Compilation

=over 4

=item *

Added a post-dynamic rule for Storable, to probe for the max. stacksize
and re-compile it with that.

=item *

Fixed B<dlopen> probe and compilation with c++.

The dlopen probe with C++ needs C<-fPIC -shared>, otherwise
C<dlopen()> will not be found. This will set C<ld=ld>, leading to the
problem below:

=item *

C<ld -f> may not be used without C<-shared>

Check C<ld=ld> (caused by the failing dlopen probe from above) and
C<ldflags> without C<-shared> and disable adding C<-fstack-protector> to it.

=item *

Added C<default_inc_excludes_dot> to C<perl -V> and F<myconfig>.

=back

=head1 Testing

=over 4

=item *

Added F<t/comp/parser_run.t> for parser tests requiring test.pl.

=item *

Added F<t/lib/warnings/toke_l1> for toke warnings tests with binary characters.

=back

=head1 Platform Support

=head2 Platform-Specific Notes

=over 4

=item Windows

=over 4

=item *

Support for compiling perl on Windows using Microsoft Visual Studio 2015
(containing Visual C++ 14.0) has been added.

This version of VC++ includes a completely rewritten C run-time library, some
of the changes in which mean that work done to resolve a socket close() bug in
perl #120091 and perl #118059 is not workable in its current state with this
version of VC++.  Therefore, we have effectively reverted that bug fix for
VS2015 onwards on the basis that being able to build with VS2015 onwards is
more important than keeping the bug fix.  We may revisit this in the future to
attempt to fix the bug again in a way that is compatible with VS2015.

These changes do not affect compilation with GCC or with Visual Studio versions
up to and including VS2013, i.e. the bug fix is retained (unchanged) for those
compilers.

Note that you may experience compatibility problems if you mix a perl built
with GCC or VS E<lt>= VS2013 with XS modules built with VS2015, or if you mix a
perl built with VS2015 with XS modules built with GCC or VS E<lt>= VS2013.
Some incompatibility may arise because of the bug fix that has been reverted
for VS2015 builds of perl, but there may well be incompatibility anyway because
of the rewritten CRT in VS2015 (e.g. see discussion at
L<http://stackoverflow.com/questions/30412951>).

=back

=back

=head1 Internal Changes

=over 4

=item *

The C<op_class()> API function has been added. This is like the existing
C<OP_CLASS()> macro, but can more accurately determine what struct an op
has been allocated as. For example C<OP_CLASS()> might return
C<OA_BASEOP_OR_UNOP> indicating that ops of this type are usually
allocated as an C<OP> or C<UNOP>; while C<op_class()> will return
C<OPclass_BASEOP> or C<OPclass_UNOP> as appropriate.

=item *

The output format of the C<op_dump()> function (as used by C<perl -Dx>)
has changed: it now displays an "ASCII-art" tree structure, and shows more
low-level details about each op, such as its address and class.

=item *

The lexer F<toke.c> is now guaranteed to work on a C<linestr> buffer SV with
minimal PTRSIZE (4 or 8 byte) length, which enables to use fast word-wise comparison
memcmp builtins. cperl only.

=item *

A C<SVt_PV> ("string type") can now be a new bodyless B<SPV> ("small
pointer value"), similar to IV and NV. With a length smaller than the
wordsize and no magic and not-blessed nor dual-lifed, strings are now
stored in the PV pointer itself and not on the heap elsewhere.
The max. SPV lengths are 7 on 64bit and 3 on 32bit, and NUL characters
are not allowed, since the length is calculated dynamically via C<strlen()>.

Allowed flags are C<SVs_TEMP> and C<SVf_UTF8> only, all other flags
will create a normal C<SVt_PV> with a body.  Creation is done via
L<newSVpvn|perlapi/newSVpvn_flags>, type-check via L<perlapi/SvSPOK>
which checks that the L<perlapi/SvANY> points 3 words forward to the
PV field in the SV head. The accessors L<SvPVX|perlapi/SvPVX>,
L<SvCUR|perlapi/SvCUR>, L<SvLEN|perlapi/SvLEN>, ... are now stricly
non-lvalues, not setable. An upgrade to a normal PV is done via
L<sv_upgrade|perlapi/sv_upgrade>.

XS problems might be C<SvPVX> and C<SvCUR> being not setable, use the
explicit setters L<perlapi/SvPV_set> or L<perlapi/SvCUR_set>
instead. There are also new L<perlapi/SvCUR_inc> and
L<perlapi/SvCUR_dec> macros.

See L<[cperl #141]|https://github.com/perl11/cperl/issues/141>.

=back

=head1 Selected Bug Fixes

=over 4

=item type-check list assignments and types

These list assignments now properly type check:

  package Bla;
  my Bla @a;
  my int $i = $a[0];
  # => Type of scalar assignment to $i must be int (not Bla)
  $i = shift @a;
  # => Type of scalar assignment to $i must be int (not Bla)

  # implicit shift
  (my int $j) = @a;
  # => Type of list assignment to $j must be int (not Bla)

i.e. we descend into many list (array/hash) ops. mderef not.

Also more builtin variables are now type-checked, such as C<@ARGV>
as C<:Array(:Str)>
and as C<:Str> C<$ARGV>, C<$0> and C<$^X>. Previously only C<$^O>.
These added types do now more internal type optimizations, e.g. using
s_eq instead of the generic eq when comparing with constants.

See L<[cperl #258]|https://github.com/perl11/cperl/issues/258>.

=item -d with tailcalls

Implemented a workaround for the debugger (C<-d>) to step into
most functions with signatures. Until the root cause with debugging
tailcalls is fixed, we convert back a signature to old-style
assignments under the debugger.
This was the only perl5 regression.
See L<[cperl #167]|https://github.com/perl11/cperl/issues/167>.

=item Restore C++ compatibility

perl5 is compileable with recent C++ compilers, but cperl since v5.24.0c not so.
We fixed more wrong goto's and wrong const declarations leading to C++
errors with C<-fpermissive>, which is basically used as stricter C mode.

E.g. error: invalid conversion from 'const HEK* {aka const hek*}' to 'HEK* {aka hek*}
[-fpermissive].
error: jump to label 'float_ipow'. crosses initialization of 'unsigned int diff'

Regression since v5.24.0c, a cperl problem only.
L<[cperl #224]|https://github.com/perl11/cperl/issues/224>

=item C<$-{$name}> leak

C< $-{$name} > would leak an C<AV> on each access if the regular
expression had no named captures.  The same applies to access to any
hash tied with L<Tie::Hash::NamedCapture> and C<< all => 1 >>.
L<[perl #130822]|https://rt.perl.org/Public/Bug/Display.html?id=130822>

=item split ' ' under use unicode_strings

C<split ' '> now handles the argument being split correctly when in the
scope of the L<< C<unicode_strings>|feature/"The 'unicode_strings' feature"
>> feature. Previously, when a string using the single-byte internal
representation contained characters that are whitespace by Unicode rules but
not by ASCII rules, it treated those characters as part of fields rather
than as field separators. This resolves [perl #130907].

=item Fix $# use after free or buffer overflow

Attempting to use the deprecated variable C<$#> as the object in an
indirect object method call could cause a heap use after free or
buffer overflow.
L<[perl #129274]|https://rt.perl.org/Public/Bug/Display.html?id=129274>

=item Fix lexer with indirect object method calls

When checking for an indirect object method call in some rare cases
the parser could reallocate the line buffer but then continue to use
pointers to the old buffer.
L<[perl #129190]|https://rt.perl.org/Public/Bug/Display.html?id=129190>

=item Forbid glob as format argument

Supplying a glob as the format argument to L<perlfunc/formline> would
cause an assertion failure.
L<[perl #130722]|https://rt.perl.org/Public/Bug/Display.html?id=130722>

=item Fix optimized match to qr

Code like C< $value1 =~ qr/.../ ~~ $value2 > would have the match
converted into a qr// operator, leaving extra elements on the stack to
confuse any surrounding expression.
L<[perl #130705]|https://rt.perl.org/Public/Bug/Display.html?id=130705>

=item Fix pad access in regex eval code blocks

Since 5.24.0 in some obscure cases, a regex which included code blocks
from multiple sources (e.g. via embedded via qr// objects) could end up
with the wrong current pad and crash or give weird results.
L<[perl #129881]|https://rt.perl.org/Public/Bug/Display.html?id=129881>

=item Fix local in regex eval code blocks

Occasionally C<local()>s in a code block within a patterns weren't being
undone when the pattern matching backtracked over the code block.
L<[perl #126697]|https://rt.perl.org/Public/Bug/Display.html?id=126697>

=item Fix substr with a magic variable

Using C<substr()> to modify a magic variable could access freed memory
in some cases.
L<[perl #129340]|https://rt.perl.org/Public/Bug/Display.html?id=129340>

=item Fix some missing Malformed UTF-8 character warnings

Perl 5.25.9 was fixed so that under C<use utf8>, the entire Perl program
is checked that the UTF-8 is wellformed.  It turns out that several edge
cases were missed, and are now fixed.
L<[perl #126310]|https://rt.perl.org/Public/Bug/Display.html?id=126310> was the original
ticket.

=back

=head1 Acknowledgements

cperl 5.26.0 represents approximately 1 week of development since Perl 5.25.3c
and contains approximately 19,000 lines of changes across 240 files from 23
authors.

Excluding auto-generated files, documentation and release tools, there were
approximately 7,000 lines of changes to 140 .pm, .t, .c and .h files.

The following people are known to have contributed the
improvements that became cperl 5.26.0:

Karl Williamson, Reini Urban, Abigail, David Mitchell, Tony Cook, Hugo van der
Sanden, Pali, Jarkko Hietaniemi, Zefram, Aaron Crane, Yves Orton, James E
Keenan, Renee Baecker, Dagfinn Ilmari Mannsåker, Steffen Müller, Steve Hay,
Craig A. Berry, Andy Lester, Dominic Hargreaves, Sergey Aleynikov, Christian
Millour, Neil Bowers, Colin Newell.

The list above is almost certainly incomplete as it is automatically generated
from version control history. In particular, it does not include the names of
the (very much appreciated) contributors who reported issues to the Perl bug
tracker.

Many of the changes included in this version originated in the CPAN modules
included in Perl's core. We're grateful to the entire CPAN community for
helping Perl to flourish.

For a more complete list of all of Perl's historical contributors, please see
the F<AUTHORS> file in the Perl source distribution.

Generated with:

    cperl Porting/acknowledgements.pl cperl-5.25.3..HEAD

=head1 Reporting Bugs

If you find what you think is a bug, you might check the articles recently
posted to the comp.lang.perl.misc newsgroup and the perl bug database at
L<https://rt.perl.org/> .  There may also be information at
L<http://www.perl.org/> , the Perl Home Page.

If you believe you have an unreported bug, please run the L<perlbug> program
included with your release.  Be sure to trim your bug down to a tiny but
sufficient test case.  Your bug report, along with the output of C<perl -V>,
will be sent off to perlbug@perl.org to be analysed by the Perl porting team.

If you think it's a cperl specific bug or trust the cperl developers more 
please file an issue at L<https://github.com/perl11/cperl/issues>.

If the bug you are reporting has security implications which make it
inappropriate to send to a publicly archived mailing list, then see
L<perlsec/SECURITY VULNERABILITY CONTACT INFORMATION>
For details of how to report the issue.

=head1 SEE ALSO

The F<Changes> file for an explanation of how to view exhaustive details on
what changed.

The F<INSTALL> file for how to build Perl.

The F<README> file for general stuff.

The F<Artistic> and F<Copying> files for copyright information.

=cut
